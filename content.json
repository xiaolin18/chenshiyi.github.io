{"meta":{"title":"辰十一","subtitle":"怕什么真理无穷，进一寸有一寸的欢喜","description":"技术博客","author":"辰十一","url":"http://xiaolin18.github.io"},"pages":[{"title":"categories","date":"2019-02-18T09:19:17.000Z","updated":"2019-02-18T09:20:44.000Z","comments":true,"path":"categories/index.html","permalink":"http://xiaolin18.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-02-18T09:24:17.000Z","updated":"2019-02-18T09:24:45.000Z","comments":true,"path":"tags/index.html","permalink":"http://xiaolin18.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"静态资源发布","slug":"static-file","date":"2019-02-18T09:25:08.000Z","updated":"2019-02-18T09:25:08.000Z","comments":true,"path":"2019/02/18/static-file/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/static-file/","excerpt":"","text":"部署页面和资源全量部署 先部署页面，后部署资源：部署间隔会出现新页面加载旧资源，并把旧资源当做新版本缓存起来，结果：用户访问到一个样式错乱的页面，除非手动刷新，否则资源缓存未过期之前会一直报错 先部署资源，后部署页面旧页面 + 新资源","categories":[{"name":"web前端","slug":"web前端","permalink":"http://xiaolin18.github.io/categories/web前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://xiaolin18.github.io/tags/前端/"},{"name":"js","slug":"js","permalink":"http://xiaolin18.github.io/tags/js/"}]},{"title":"SCSS基础","slug":"scss/scss-base","date":"2019-02-18T08:51:33.000Z","updated":"2019-02-18T08:51:33.000Z","comments":true,"path":"2019/02/18/scss/scss-base/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/scss/scss-base/","excerpt":"","text":"变量 揭秘: https://www.w3cplus.com/preprocessor/sass-basic-variable.html 1$width: 200px !default; 包含以下三部分: 变量声名符：$ 变量名称 变量的值 !default表示默认值 普通变量与默认变量 普通变量：定义之后可以在全局范围内使用 默认变量：用来设置默认值，在组件化开发中非常有用。在后面添加!default,然后根据需求来覆盖，覆盖方式是在默认变量之前重新声名下变量即可 变量的调用：声名变量后，在需要的地方直接调用即可 局部变量和全局变量 局部变量：定义在元素内部，会覆盖全局变量 全局变量：定义在元素外面 什么时候声明变量？ 该值至少重复出现了两次 该值至少可能会被更新一次 该值所有的表现都与变量有关 不要声名一个永远不需要更新或者只在单一地方使用的变量 嵌套 选择器嵌套 1234567nav a &#123; color:red;&#125;header nav a &#123; color:green;&#125; scss嵌套写法 123456789// &amp; 置后表示父选择器为子集nav &#123; a &#123; color: red; &#125; header &amp; &#123; color: green; &#125;&#125; 属性嵌套 1234.box &#123; border-top: 1px solid red; border-bottom: 1px solid green;&#125; scss嵌套写法 123456.box &#123; border: &#123; top: 1px solid red; bottom: 1px solid green; &#125;&#125; 伪类嵌套 12345678clearfix:before, .clearfix:after &#123; content: \"\"; display: table;&#125;.clearfix:after &#123; clear: both; overflow: hidden;&#125; scss嵌套 1234567891011.clearfix&#123; &amp;:before, &amp;:after &#123; content:\"\"; display: table; &#125; &amp;:after &#123; clear:both; overflow: hidden; &#125;&#125; 注意：避免选择器嵌套 选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果 选择器越具体则声明语句越冗长，而且对最近选择器的引用(&amp;)也越频繁 混合宏（需要重复使用大段的样式时） 声明混合宏：@mixin 不带参数混合宏 1234@mixin border-radius &#123; -webkit-border-radius: 5px; border-radius: 5px;&#125; 带参数的混合宏 1234@mixin border-radius($radius: 5px) &#123; -webkit-border-radius: $radius; border-radius: $radius;&#125; 复杂的混合宏（大括号里可以带逻辑关系） 12345678@mixin box-shadow($shadow...) &#123; @if length($shadow) &gt;= 1 &#123; @include prefixer(box-shadow, $shadow); &#125; @else&#123; $shadow:0 0 4px rgba(0,0,0,.3); @include prefixer(box-shadow, $shadow); &#125;&#125; 混合宏的参数 传一个不带值得参数, 调用时可以给混合宏传一个参数值 1234@mixin border-radius($radius) &#123; -webkit-border-radius: $radius; border-radius: $radius;&#125; 传一个带值得参数, 相当于有一个默认值，调用时不传参会直接取默认值 1234@mixin border-radius($radius: 5px) &#123; -webkit-border-radius: $radius; border-radius: $radius;&#125; 传多个参数, 当混合宏参数过多时，可以使用’…’代替 12345678@mixin size($width, $height) &#123; width: $width; height: $height;&#125;.box &#123; @include size(500px, 300px)&#125; 调用混合宏； @include 123button &#123; @include border-radius;&#125; 编译结果 1234button &#123; -webkit-border-radius: 5px; border-radius: 5px;&#125; 不足之处 生成冗余代码，不同的地方调用多次，不能智能的将相同的样式代码合在一起 继承 @extend 1234567891011121314151617btn &#123; border: 1px solid #ccc; padding: 6px 10px; font-size: 14px;&#125;.btn-primary &#123; background-color: #f36; color: #fff; @extend .btn;&#125;.btn-second &#123; background-color: orange; color: #fff; @extend .btn;&#125; scss编译后的结果 123456789101112131415.btn, .btn-primary, .btn-second &#123; border: 1px solid #ccc; padding: 6px 10px; font-size: 14px;&#125;.btn-primary &#123; background-color: #f36; color: #fff;&#125;.btn-second &#123; background-clor: orange; color: #fff;&#125; 占位符 %placeholder 如果不被@extend调用，就不会产生任何代码。 通过@extend调用的占位符，会将相同的代码合并到一起。 混合宏 VS 继承 VS 占位符 混合宏：如果代码中涉及到变量，使用混合宏来创建相同的代码块 继承：如果代码块中不需要传任何变量参数，而且有一个基类已经在文件中存在了，使用继承 占位符：类似继承，不过不调用就不会在css中产生任何代码 插值 不能在@mixin语法中调用 @extend中可以调用 123456789$properties: (margin, padding);@mixin set-value($side, $value) &#123; @each $prop in $properties &#123; #&#123;$prop&#125;-#&#123;$side&#125;: $value; &#125;&#125;.login-box &#123; @include set-value(top, 14px);&#125; 编译出的css 1234.login-box &#123; margin-top: 14px; padding-top: 14px;&#125; 注释 / / // 数据类型 数字：1，2，3，10px 字符串：引号字符串和无引号字符串 使用 #{ }插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串，这样方便了在混合指令 (mixin) 中引用选择器名 颜色：如：blue, #fff 布尔型：true, false 空置：null 值列表：用空格或者逗号分开 运算 加法/减法：在变量或属性中都可以做加法/减法运算 乘法：只能有一个单位，两个会报错 除法：/ 被当做除号的情况 数值被圆括号包围 数值或它的任意部分是存储在一个变量中或是函数的返回值 数值是另一个数学表达式的一部分 变量运算 数字运算 字符运算","categories":[],"tags":[]},{"title":"PC、移动端适配基本概念","slug":"responsive/responsive-base","date":"2019-02-18T08:45:45.000Z","updated":"2019-02-18T08:45:45.000Z","comments":true,"path":"2019/02/18/responsive/responsive-base/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/responsive/responsive-base/","excerpt":"","text":"物理像素(physical pixel)又称设备像素","categories":[],"tags":[]},{"title":"图片适配PC、移动端","slug":"responsive/responsive-img","date":"2019-02-18T08:43:08.000Z","updated":"2019-02-19T03:43:40.681Z","comments":true,"path":"2019/02/18/responsive/responsive-img/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/responsive/responsive-img/","excerpt":"","text":"相关链接移动端适配方案 问题 什么是自适应？ PC、移动端适配方案？ 图片放大、缩放会导致变形模糊 图片加载缓慢，如何改善 百分比布局 因为pc端长&gt;高，移动端长&lt;高，所以可以有两张图片。根据视口的宽高比例来决定操作展示那一张图片 12长/高 &gt; 1 ==&gt; 显示长 &gt; 高的图片长/高 &lt;= 1 ==&gt; 显示长 &lt; 高的图片 img标签引入的图片，可以使用延迟加载的方式来加载，在实际加载图片之前先用js检查窗口宽度，然后加载不同分辨率的图片 123&lt;div id=\"box\"&gt; &lt;img id=\"img\" class=\"box-content\" alt=\"响应式图片\"&gt;&lt;/div&gt; 1234567891011121314151617181920body &#123; margin: 0 auto; padding: 0 auto;&#125;#box &#123; margin: 0 auto; width: 100%; height: 100%; overflow: hidden; cursor: pointer;&#125;.box-content &#123; width: 100%; height: 100%; position: fixed; top: 0; bottom: 0; left: 0; right: 0;&#125; 123456789101112131415var img = document.getElementById('img')var offsetWid = document.documentElement.clientWidth;var offsetHei = document.documentElement.clientHeight;let rat = offsetWid/offsetHeiif (rat &lt; 1) &#123; img.setAttribute('src', './bg1.png')&#125; else &#123; img.setAttribute('src', './bg.jpg')&#125;var btn = document.getElementById(\"box\");btn.onclick = function () &#123; // 当前页面打开 window.location.href=\"https://www.dajie.com/corp/6830864/\"&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-02-18T08:42:17.000Z","updated":"2019-02-18T08:42:17.000Z","comments":true,"path":"2019/02/18/hello-world/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" 这里移入一张图 123 More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"我眼中的Vuex","slug":"vuex","date":"2019-02-18T08:41:55.000Z","updated":"2019-02-18T08:41:55.000Z","comments":true,"path":"2019/02/18/vuex/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/vuex/","excerpt":"","text":"vuex是做什么的？Official：一个专为Vue.js程序开发的状态管理模式Myself：Vue的状态树 有哪些优势？ 方便的数据管理 vue的数据流：单向数据流 123456789101112131415161718new Vue(&#123; // state data () &#123; return &#123; count: 0 &#125; &#125;, // view template: ` &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt; `, // actions methods: &#123; increment () &#123; this.count++ &#125; &#125;&#125;) 那么问题来了 多个视图依赖于同一个状态：多层嵌套，对兄弟组件间状态的传递无能为力 来自不同视图的行为需要变更同一个状态：父子组件直接引用，或者通过事件来变更和同步状态的多分拷贝一个状态被传来传去，破坏了Vue数据流的简洁 结论： 把组件的共享状态抽取出来，以一个全局单例模式管理，组件在任意时刻可以获取任意数据 配合devTools进行数据追踪 组件间的通信 父子组件通信 非父子组件间的通信 如何使用Vuex以及核心概念 官网图 自己总结的图 如何在项目中合理的使用vuex 基础用法 12345678910111213Vue.use(vuex)const app = new Vue(&#123; el: '#app', // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件 store, components: &#123; Counter &#125;, template: ` &lt;div class=\"app\"&gt; &lt;counter&gt;&lt;/counter&gt; &lt;/div&gt; `&#125;) 12345678910111213state: &#123; count: 0&#125;,mutations: &#123; increment (state) &#123; state.count++ &#125;&#125;,actions: &#123; increment (context) &#123; context.commit('increment') &#125;&#125; 方案一 方案二","categories":[],"tags":[]},{"title":"作用域","slug":"jsBase/scope","date":"2019-02-18T07:38:03.000Z","updated":"2019-02-18T07:38:03.000Z","comments":true,"path":"2019/02/18/jsBase/scope/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/jsBase/scope/","excerpt":"","text":"概念 JS是脚本语言，只有runtime, 没有buildTime。是由各个浏览器引擎编译运行起来的 分类 静态作用域（词法作用域）: js中的变量都有静态作用域，在编译阶段确定作用域，不会被函数的位置所改变。变量的作用域是变量可以被访问的区域。 1234567891011var value = 1;function foo() &#123; console.log(value);&#125;function bar() &#123; var value = 2; foo();&#125;bar(); 嵌套作用域：如果一个变量的直接作用域嵌套了多层作用域，则变量在所有的作用域都可以被访问到 12345678function foo (arg) &#123; function bar() &#123; console.log( 'arg:' + arg ); &#125; bar();&#125;console.log(foo('hello')); // arg:hello 覆盖作用域: 内部作用域的变量与外部作用域的变量名相同，内部作用域就无法访问到外部的变量 12345678var x = \"global\"；function f() &#123; var x = \"local\"； console.log(x); // local&#125;f();console.log(x); // global","categories":[],"tags":[]},{"title":"SCSS进阶","slug":"scss/scss-advanced","date":"2019-02-18T07:38:03.000Z","updated":"2019-02-18T07:38:03.000Z","comments":true,"path":"2019/02/18/scss/scss-advanced/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/scss/scss-advanced/","excerpt":"","text":"SCSS控制命令 @if: 根据条件来处理样式块，如果条件为true返回一个样式块，反之false返回另一个样式块。配合@else if 和 @else 一起使用 12345678910111213141516// 假设要控制一个元素的隐藏和显示，就可以定义一个混合宏，通过@if...@else...来判断传进参数的值来控制。@mixin blockOrHidden($boolean:true) &#123; @if $boolean &#123; display: block; &#125; @else &#123; display: none; &#125;&#125;.block &#123; @include blockOrHidden;&#125;.hidden &#123; @include blockOrHidden(false);&#125; 编译出来的css 123456.block &#123; display: block;&#125;.hidden &#123; display: none;&#125; @for: 循环 @for $i from through （包括end这个数） @for $i from to （不包括end这个数） $i 表示变量 start 表示起始值 end 表示结束值12345@for $i from 1 through 3 &#123; .item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;&#125; @for 应用在网络系统生成各个格子class的代码 12345678910111213141516$grid-prefix: span !default;$grid-width: 60px !default;$grid-gutter: 20px !default;%grid: &#123; float: left; margin-left: $grid-gutter / 2; margin-right: $grid-gutter / 2;&#125;@for $i from 1 through 12 &#123; .#&#123;$grid-prefix&#125;#&#123;$i&#125; &#123; width: $grid-width * $i + $grid-gutter * ($i - 1); @extend %grid; &#125;&#125; @while循环：生成不同的样式块，直到表达式值为false时停止循环。 123456789$types: 4;$type-width: 20px;@width $types &gt; 0 &#123; .while-#&#123;$types&#125; &#123; width: $type-width + $types; &#125; $types: $types - 1;&#125; @each循环：遍历一个列表，然后从列表中取出对应的值@each $var in 12345678910111213$list: adam john wynn mason kuror;@mixin author-images &#123; @each $authorn in $list &#123; .photo-#&#123;$author&#125; &#123; background: url(\"/images/avatars/#&#123;author&#125;.png\") no-repeat; &#125; &#125;&#125;@author-bio &#123; @include author-images;&#125; SCSS函数 字符串函数 数字函数 列表函数 颜色函数 introspection函数 三元函数 字符串函数 unquote($string): 删除字符串中的引号 只能删除最外层的 如果没有带引号，则返回原始的字符串 quote($string): 给字符串添加引号 如果字符串带有引号会统一换成双引号 字符串中间有单引号或者空格时，需要用单引号或双引号括起，否则编译的时候将会报错 to-upper-case(): 将字符串小写字母转换成大写字母 1234.test &#123; text: to-upper-case(aaaa); text: to-upper-case(aA-aAAA-aaa)&#125; 1234.test &#123; text: AAAA; text: AA-AA-AAA;&#125; to-lower-case(): 将字符串转换为小写字母 1234.test &#123; text: to-lower-case(AAAAA); text: to-lower-case(aA-aAAA-aaa);&#125; 1234.test &#123; text: aaaaa; text: aa-aaaa-aaa;&#125; 数字函数 percentage($value): 将一个不带单位的数转换成百分比，如果带有单位会报错 round($value): 将一个数值四舍五入转为整数，可以携带单位的任何值 ceil($value): 将大于自己的小数转换成下一位整数，只入不舍 floor($value): 将一个数去除他的小数部分，只舍不入 abs($value): 返回一个数的绝对值 min($numbers…): 找出几个数之间的最小值，不能存在不同的单位 max($numbers…): 找出几个数之间的最大值，不能存在不同的单位 random(): 获取随机数 列表函数：主要包括一些对列表参数的使用 length($list): 返回列表的长度 nth($list, $n): 返回一个列表中指定的某个标签 join($list1, $list2, [$separator]): 将两个列给连接在一起，变成一个列表 append($list1, $val, [$separator]): 将某个值放在列表后面 separator的值：comma、space zip($lists…): 将几个列表结合成一个多维的列表，每一个单一的列表数值必须是相同的 index($list, $value): 返回一个值在列表中的位置值 introspection: 检测函数 type-of($value): 返回一个值得类型 number: 数值型 string: 字符串型 bool: 布尔型 color: 颜色型 unit($number): 返回一个值的单位 unitless($number): 返回一个值是否带单位 comparable($number-1, $number-2): 判断两个值是否可以做加减和合并 Miscellnaeous: 三元条件函数if($condition, $if-true, $if-false) Map 格式 12345$map: ( $key1: value1, $key2: value2, $key3: value3) 实例: 可应用于换肤管理颜色变量 12345678$default-color: #fff !default;$primary-color: #22ae39 !default;// map等同上面的$color&#123; default: #fff !default; pramary: #22ae39 !default;;&#125; 方法 map-get($map, $key): 根据指定的key值，返回map中相关的值.map中没有会返回null 12345678910$social-colors: &#123; driabble: #fff; facebook: #ccc; github: #171515; google: #db3377; twitter: #55acee;&#125;.btn-driabble &#123; color: map-get($social-colors, driabble)&#125; map-merge($map1,$map2): 将两个map合成一个map 12345678910111213$color: ( text: #f36; link: #f63; border: #ddd; background: #fff;)$type: ( font-size: 12px; line-height: 1.6; border: #ccc; background: #000;)$newmap: map-merge($color,$type) scss编译 12345678$newmap: ( text: #f36; link: #f63; font-size: 12px; line-height: 1.6; border: #ccc; background: #000;) map-remove($map,$key): 从map中删除一个key, 返回一个新的map map-keys($map): 返回map中所有的key map-values($map): 返回map中所有的value map-has-key($map,$key): 根据给定的key值判断map是否有对应的value值，如果有返回true,否则返回false 1234567891011121314151617181920212223242526// 改进上面的代码$social-colors: &#123; driabble: #fff; facebook: #ccc; github: #171515; google: #db3377; twitter: #55acee;&#125;@if map-has-key($social-colors, driabble) &#123; .btn-driabble &#123; color: map-get($social-colors, driabble) &#125;&#125; @else &#123; @warn \"No color found for faceboo in $social-colors map.property ommitted.\"&#125;// 改进@function colors($color) &#123; @if not map-has-key($social-colors,$color) &#123; @warn \"No color found for '#&#123;$color&#125;' in $social-colors map.property ommitted.\" &#125; @return map-get($social-colors, $color)&#125;.btn-driabble &#123; color: colors(driabble)&#125; keywords($args): 动态创建一个map, 返回一个函数的参考，这个参数可以动态的设置key和value 颜色函数 RGB() rgb($red,$green,$blue): 根据红绿蓝三个值创建颜色 rgba(): 将一个颜色根据透明度转换成 rgba 颜色 rgba($red,$green,$blue,$alpha) rgba($color,$alpha) red($color): 从一个颜色中获取其中红色值 green($color): 从一个颜色中获取其中绿色值 blue($color): 从一个颜色中获取其中蓝色值 mix($color-1,$color-2,[$weight]): 把两种颜色混合在一起 HSL函数 hsl($hue,$saturation,$lightness)：通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色 hsla($hue,$saturation,$lightness,$alpha)：通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色 hue($color)：从一个颜色中获取色相（hue）值 saturation($color)：从一个颜色中获取饱和度（saturation）值 lightness($color)：从一个颜色中获取亮度（lightness）值 adjust-hue($color,$degrees)：通过改变一个颜色的色相值，创建一个新的颜色 lighten($color,$amount)：通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色 darken($color,$amount)：通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色 saturate($color,$amount)：通过改变颜色的饱和度值，让颜色更饱和，从而创建一个新的颜色 desaturate($color,$amount)：通过改变颜色的饱和度值，让颜色更少的饱和，从而创建出一个新的颜色 grayscale($color)：将一个颜色变成灰色，相当于desaturate($color,100%) complement($color)：返回一个补充色，相当于adjust-hue($color,180deg) invert($color)：反回一个反相色，红、绿、蓝色值倒过来，而透明度不变 opacity函数 alpha($color)/opacity($color): 获取颜色透明度 rgba($color, rgba): 改变颜色透明度 opacify($color, $amount) / fade-in($color, $amount)：使颜色更不透明 transparentize($color, $amount) / fade-out($color, $amount)：使颜色更加透明@规则 @import: 引入文件 根据文件名引入。 默认情况下，它会寻找 Sass 文件并直接引入 在少数几种情况下，它会被编译成 CSS 的 @import 规则： 如果文件的扩展名是 .css。 如果文件名以 http:// 开头。 如果文件名是 url()。 如果 @import 包含了任何媒体查询（media queries） @media: 冒泡到外面 123456.sidebar &#123; width: 300px; @media screen and (orientation: landscape) &#123; width: 500px; &#125;&#125; 12345678.sidebar &#123; width: 300px; &#125;@media screen and (orientation: landscape) &#123; .sidebar &#123; width: 500px; &#125; &#125; @extend: 扩展选择器或占位符 @at-root: 当你选择器嵌套多层之后，想让某个选择器跳出 123456789101112.a &#123; color: red; .b &#123; color: orange; .c &#123; color: yellow; @at-root .d &#123; color: green; &#125; &#125; &#125; &#125; 123456789101112131415.a &#123; color: red;&#125;.a .b &#123; color: orange;&#125;.a .b .c &#123; color: yellow;&#125;.d &#123; color: green;&#125; @debug: 调试指令 1@debug 10em + 12em; @warn: 警告指令 1@warn \"Assuming #&#123;$x&#125; to be in pixels\"; @error: 错误指令 1@error \"你需要将#&#123;$x&#125;值设置在10以内的数\"; 实战–七色卡 123456789101112131415161718192021222324252627282930&lt;ul class=\"swatches red\"&gt; &lt;li&gt;&lt;/li&gt; ... &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=\"swatches orange\"&gt; &lt;li&gt;&lt;/li&gt; … &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=\"swatches yellow\"&gt; &lt;li&gt;&lt;/li&gt; … &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=\"swatches green\"&gt; &lt;li&gt;&lt;/li&gt; … &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=\"swatches blue\"&gt; &lt;li&gt;&lt;/li&gt; … &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=\"swatches purple\"&gt; &lt;li&gt;&lt;/li&gt; … &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110//定义变量$redBase: #DC143C;$orangeBase: saturate(lighten(adjust_hue($redBase, 39), 5), 7);//#f37a16$yellowBase: saturate(lighten(adjust_hue($redBase, 64), 6), 13);//#fbdc14$greenBase: desaturate(darken(adjust_hue($redBase, 102), 2), 11);//#73c620$blueBase: saturate(darken(adjust_hue($redBase, 201), 2), 1);//#12b7d4$purpleBase: saturate(darken(adjust_hue($redBase, 296), 2), 1);//#a012d4$blackBase: #777;$bgc: #fff;// 定义mixin//定义颜色变暗的 mixin@mixin swatchesDarken($color) &#123; @for $i from 1 through 10 &#123; $x:$i+11; li:nth-child(#&#123;$x&#125;) &#123; $n:$i*5; $bgc:darken($color,$n); //颜色变暗 background-color: $bgc;&amp;:hover:before &#123; //hover状态显示颜色编号 content: \"#&#123;$bgc&#125;\"; color: lighten($bgc,40); font-family: verdana; font-size: 8px; padding: 2px; &#125; &#125; &#125;&#125;//定义颜色变亮的 mixin@mixin swatchesLighten($color) &#123; @for $i from 1 through 10 &#123; $x:11-$i; li:nth-child(#&#123;$x&#125;) &#123; $n:$i*5; $bgc:lighten($color,$n); background-color: $bgc;&amp;:hover:before &#123; content: \"#&#123;$bgc&#125;\"; color: darken($bgc,40); font-family: verdana; font-size: 8px; padding: 2px; &#125; &#125; &#125;&#125;// 调用mixin.swatches li &#123; width: 4.7619047619%; float: left; height: 60px; list-style: none outside none;&#125;ul.red &#123; @include swatchesLighten($redBase); @include swatchesDarken($redBase); li:nth-child(11) &#123; background-color: $redBase; &#125;&#125;ul.orange &#123; @include swatchesLighten($orangeBase); @include swatchesDarken($orangeBase); li:nth-child(11) &#123; background-color: $orangeBase; &#125;&#125;ul.yellow &#123; @include swatchesLighten($yellowBase); @include swatchesDarken($yellowBase); li:nth-child(11) &#123; background-color: $yellowBase; &#125;&#125;ul.green &#123; @include swatchesLighten($greenBase); @include swatchesDarken($greenBase); li:nth-child(11) &#123; background-color: $greenBase; &#125;&#125;ul.blue &#123; @include swatchesLighten($blueBase); @include swatchesDarken($blueBase); li:nth-child(11) &#123; background-color: $blueBase; &#125;&#125;ul.purple &#123; @include swatchesLighten($purpleBase); @include swatchesDarken($purpleBase); li:nth-child(11) &#123; background-color: $purpleBase; &#125;&#125;ul.black &#123; @include swatchesLighten($blackBase); @include swatchesDarken($blackBase); li:nth-child(11) &#123; background-color: $blackBase; &#125;&#125;","categories":[],"tags":[]},{"title":"SCSS简介","slug":"scss/scss-brief","date":"2019-02-18T07:38:03.000Z","updated":"2019-02-18T07:38:03.000Z","comments":true,"path":"2019/02/18/scss/scss-brief/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/scss/scss-brief/","excerpt":"","text":"SCSS的安装方式 gem: 安装所有的ruby应用； npm: 安装所有的node应用； brew: 安装所有的mac应用； scss是ruby写的应用，所以安装方式要选择gem gem install sass sass -v检查是否安装 sass包下载到本地安装：gem install sass包路径xx 项目引入scss只是一个预处理工具，最终项目里面要引用的实际上是：编译好的.css文件 SCSS编译方法 命令编译 手动编译：sass 要编译的文件路径:要输出的文件路径 自动编译(检测到修改之后会自动编译)：sass –watch 要编译的文件路径:要输出的文件路径 GUI工具编译 Koala: http://www.w3cplus.com/preprocessor/sass-gui-tool-koala.html CodeKit: https://www.w3cplus.com/preprocessor/sass-gui-tool-codekit.html 自动化编译 gulp 1234567891011121314var gulp = require('gulp');var sass = require('gulp-sass');gulp.task('sass', function () &#123; gulp.src('./scss/*.scss') .pipe(sass()) .pipe(gulp.dest('./css'));&#125;);gulp.task('watch', function() &#123; gulp.watch('scss/*.scss', ['sass']);&#125;);gulp.task('default', ['sass','watch']); grunt SCSS编译输出不同样式风格 123456789101112131415nav &#123; ul &#123; margin: 0; padding: 0; list-style: none; &#125; li &#123; display: inline-block; &#125; a &#123; display: block; padding: 6px 12px; text-decoration: none; &#125;&#125; 嵌套输出 –style nested 12345678910nav ul &#123; margin: 0; padding: 0; list-style: none; &#125;nav li &#123; display: inline-block; &#125;nav a &#123; display: block; padding: 6px 12px; text-decoration: none; &#125; 展开输出 –style expanded (和 nested 类似，只是大括号在另起一行) 12345678910111213nav ul &#123; margin: 0; padding: 0; list-style: none;&#125;nav li &#123; display: inline-block;&#125;nav a &#123; display: block; padding: 6px 12px; text-decoration: none;&#125; 紧凑输出 –style compact 123nav ul &#123; margin: 0; padding: 0; list-style: none; &#125;nav li &#123; display: inline-block; &#125;nav a &#123; display: block; padding: 6px 12px; text-decoration: none; &#125; 压缩输出 –style compressed (去掉标准的 Sass 和 CSS 注释及空格) 1nav ul&#123;margin:0;padding:0;list-style:none&#125;nav li&#123;display:inline-block&#125;nav a&#123;display:block;padding:6px 12px;text-decoration:none&#125; SCSS常见编译错误 字符编译引起的，Scss编译过程不支持GBK编码，所以在创建文件的时候，需要将文件编码设置为”utf-8” 中文字符引起的，项目中文件命名以及目录命名都不要使用中文字符 SCSS调试 sourcemap","categories":[],"tags":[]},{"title":"初始化项目","slug":"vue-cli3.0/init","date":"2019-02-18T07:38:03.000Z","updated":"2019-02-18T07:38:03.000Z","comments":true,"path":"2019/02/18/vue-cli3.0/init/","link":"","permalink":"http://xiaolin18.github.io/2019/02/18/vue-cli3.0/init/","excerpt":"","text":"command12345npm install -g @vue/vlivue --versionvue create XXX","categories":[],"tags":[]}]}